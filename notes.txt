Figure out how to run python3 code on Ahab
-----------------------------------
Results of goodness of fit checks:

Three intervals (breaks at 0.1 and 0.25), 1, x, x^2, x^3, x^4.

metallicity = [-0.1]
[deviation / I1,		wavelength		logg	temperature	mu]
[-0.009491111111106017, 	54.0, 		3.0, 	16000.0] 				deviation = I(0)
[-0.002573739524375959, 	124.5, 		4.0, 	20000.0, 		0.0] 	deviation = deltaI over delta-mu = 0.001 
[0.00554109010298971, 	111.5, 		3.0, 	9000.0, 		0.9]	deviation = abs(Imu - I(mu))
Done in about 1 hour 18 minutes

python calc_limbdark.py 'im05k2.pck' 'limbdark05.pkl' -b 0.1 0.25 -s -c
metallicity = [-0.5]
[-0.011240512820506292, 52.0, 		2.5, 	16000.0] 				deviation = I(0)
[-0.0029765257851622905,102.5, 		3.5, 	20000.0, 		0.0] 	deviation = deltaI over delta-mu = 0.001 
[0.0070647571757599505, 111.5, 		2.0, 	8500.0, 		0.9]	deviation = abs(Imu - I(mu))
Done in about 1 hour 19 minutes

----------------------------------
Runtimes:

Calculation and pickling of limb darkening fits without checks: 42 seconds. With checks: 1 hour.

Calculation of pre-processed star data. z_step = 0.0005.

Vega: 
user	0m1.730s
sys	0m1.120s
2.85s

Sun:
user	0m2.217s
sys	0m1.046s
3.26s

Calculation of integrals. Inclinations: 0 1.5707963267948966 0.01 (159)

Vega:
user	0m52.539s
sys	0m28.148s
0.51s per inclination

Sun:
user	0m54.783s
sys	0m29.648s
0.53s per inclination

----------------------------------------
Convergence analysis. 

# Computation of a precise spectrum (on Ahab). The following results in a 3Gb file with 40K values of z.
time python calc_star.py 'vega_40K_zvalues.pkl' 'limbdark_m01.pkl' 0.00005 0.8760 40.124 2.135 2.818
real	0m23.522s
user	0m30.847s
sys	0m11.503s
# The following then results in a text version of Vega's spectrum (24 Kb)
time python calc_spectra.py 'vega_40K_zvalues.txt' 'vega_40K_zvalues.pkl' -i 0.08683
# Fit to an exponential of the form a*np.exp(b*x)+c
0.002 0.005662332964403229
0.0019 0.003346186613059344
0.0018 0.0004407185731677699
0.0017 0.0021841783731126403
0.0015999999999999999 0.004504802387261709
0.0014999999999999998 0.0013116745195749454
0.0013999999999999998 0.002185036371358817
0.0012999999999999997 0.001602279337484602
0.0011999999999999997 0.002184208129560653
0.0010999999999999996 0.00043787929558825267
0.0009999999999999996 0.000144987013584969
0.0008999999999999995 0.0004374959408164892
0.0007999999999999995 0.00014515966427212945
0.0006999999999999995 0.00014599073788204038
0.0005999999999999994 0.00043756389203760245
0.0004999999999999994 0.00014576051124033854
0.0003999999999999993 0.00014580455329854462
0.00029999999999999927 0.00043731719581837757
[-14.93243806  -0.15353759  14.93124057]

----------------------------------------
# converting from CR (old Apple style) to LF (unix style) newlines
tr '\r' '\n' < im01k2.pck > im01k2.unix
# finding the intensities at some temperature, gravity and wavelength = 401
grep -A 385 'TEFF\s*5750.\s*GRAVITY\s*2.0' im01k2.unix
# pre-pend pound signs to lines without intensity numbers in a .pck file from Castelli and Kurucz
sed '/TEFF/{s/^/#/;n;s/^/#/;n;s/^/#/;}' im05k2.pck > im05k2.pck
---------------------------------------
git checkout -b feature/faster_interpolation  # create a branch and switch to it
# update the remote reference, add an upstream reference to the new branch
git push --set-upstream origin feature/faster_interpolation 
git checkout master # switch back to master branch
git merge feature/faster_interpolation # merge the history of the feature branch onto master
git push # push the merge
git branch # look at branches  
git branch -d feature/faster_interpolation # delete a branch
git push --delete feature/faster_interpolation # tell the remote server to stop tracking the branch
-------------------------
Mention the possibility of using the python Decimal module / mpmath in Newton's method
Mention structured arrays as a possible way to store limb darkening data
----------------------------------
# look at function definitions in python
import sys, inspect
sys.stdout.write(inspect.getsource(surf.R))