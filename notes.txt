-----------------------------------
Mention the possibility of using the python Decimal module / mpmath in Newton's method
Mention structured arrays as a possible way to store limb darkening data
----------------------------------
Results of goodness of fit checks:

Three intervals (breaks at 0.1 and 0.25), 1, x, x^2, x^3, x^4.

metallicity = [-0.1]
[deviation / I1,		wavelength		logg	temperature	mu]
[-0.009491111111106017, 	54.0, 		3.0, 	16000.0] 				deviation = I(0)
[-0.002573739524375959, 	124.5, 		4.0, 	20000.0, 		0.0] 	deviation = deltaI over delta-mu = 0.001 
[0.00554109010298971, 	111.5, 		3.0, 	9000.0, 		0.9]	deviation = abs(Imu - I(mu))
Done in about 1 hour 18 minutes

python calc_limbdark.py 'im05k2.pck' 'limbdark05.pkl' -b 0.1 0.25 -s -c
metallicity = [-0.5]
[-0.011240512820506292, 52.0, 		2.5, 	16000.0] 				deviation = I(0)
[-0.0029765257851622905,102.5, 		3.5, 	20000.0, 		0.0] 	deviation = deltaI over delta-mu = 0.001 
[0.0070647571757599505, 111.5, 		2.0, 	8500.0, 		0.9]	deviation = abs(Imu - I(mu))
Done in about 1 hour 19 minutes

----------------------------------
Runtimes:

Calculation and pickling of limb darkening fits without checks: 42 seconds. With checks: 1 hour.

Calculation of pre-processed star data. z_step = 0.0005.

Vega: 
user	0m1.730s
sys	0m1.120s
2.85s

Sun:
user	0m2.217s
sys	0m1.046s
3.26s

Calculation of integrals. Inclinations: 0 1.5707963267948966 0.01 (159)

Vega:
user	0m52.539s
sys	0m28.148s
0.51s per inclination

Sun:
user	0m54.783s
sys	0m29.648s
0.53s per inclination

----------------------------------------
# converting from CR (old Apple style) to LF (unix style) newlines
tr '\r' '\n' < im01k2.pck > im01k2.unix
# finding the intensities at some temperature, gravity and wavelength = 401
grep -A 385 'TEFF\s*5750.\s*GRAVITY\s*2.0' im01k2.unix
# pre-pend pound signs to lines without intensity numbers in a .pck file from Castelli and Kurucz
sed '/TEFF/{s/^/#/;n;s/^/#/;n;s/^/#/;}' im05k2.pck > im05k2.pck
---------------------------------------
git checkout -b feature/faster_interpolation  # create a branch and switch to it
# update the remote reference, add an upstream reference to the new branch
git push --set-upstream origin feature/faster_interpolation 
git checkout master # switch back to master branch
git merge feature/faster_interpolation # merge the history of the feature branch onto master
git push # push the merge
git branch # look at branches  
git branch -d feature/faster_interpolation # delete a branch
git push --delete feature/faster_interpolation # tell the remote server to stop tracking the branch
-------------------------
# look at function definitions in python
import sys, inspect
sys.stdout.write(inspect.getsource(surf.R))